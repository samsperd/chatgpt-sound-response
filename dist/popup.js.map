{"version":3,"sources":["popup.js"],"names":["voiceSelect","document","getElementById","langSelect","rateSlider","pitchSlider","rateOutput","pitchOutput","chrome","tts","getVoices","voices","groupedVoices","filter","voice","hasOwnProperty","reduce","acc","lang","push","option","createElement","value","style","textTransform","textContent","appendChild","addEventListener","e","target","disabled","runtime","sendMessage","type","forEach","voiceName","storage","local","get","result","speechStore","rate","pitch","event","selectedVoiceName","selectedRate","selectedPitch"],"mappings":";AAEA,MAAMA,EAAcC,SAASC,eAAe,eACtCC,EAAaF,SAASC,eAAe,cAGrCE,EAAaH,SAASC,eAAe,eAGrCG,EAAcJ,SAASC,eAAe,eAGtCI,EAAaL,SAASC,eAAe,eACrCK,EAAcN,SAASC,eAAe,gBAkB5CM,OAAOC,IAAIC,UAAWC,IAElB,MAEIC,EAFmBD,EAAOE,OAAOC,IAAUA,EAAMC,eAAe,gBAEjCC,OAAO,CAACC,EAAKH,KAChD,MAAMI,EAAOJ,EAAMI,KAKnB,OAJKD,EAAIF,eAAeG,KACtBD,EAAIC,GAAQ,IAEdD,EAAIC,GAAMC,KAAKL,GACRG,GACN,IAGH,IAAK,MAAMC,KAAQN,EAAe,CAChC,MAAMQ,EAASnB,SAASoB,cAAc,UACtCD,EAAOE,MAAQJ,EACfE,EAAOG,MAAMC,cAAgB,YAG7BJ,EAAOK,YAAcP,EACrBf,EAAWuB,YAAYN,GAIzBjB,EAAWwB,iBAAiB,SAAWC,IACrC,MAAMV,EAAOU,EAAEC,OAAOP,MAChBX,EAASC,EAAcM,IAAS,GAChClB,EAAcC,SAASC,eAAe,eAChC,IAARgB,GACFlB,EAAY8B,UAAW,EACvBtB,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,UAAWf,KAAM,SAIpDlB,EAAY8B,UAAW,EACvBtB,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,UAAWf,KAAMA,KAGtDP,EAAOuB,QAAQpB,IACb,MAAMM,EAASnB,SAASoB,cAAc,UACtCD,EAAOE,MAAQR,EAAMqB,UACrBf,EAAOK,YAAcX,EAAMqB,UAC3BnC,EAAY0B,YAAYN,OAY5BZ,OAAO4B,QAAQC,MAAMC,IAAI,CAAC,eAAgB,SAASC,GAUjD,GATAnC,EAAWkB,MAAQiB,EAAOC,YAAYC,KACtCpC,EAAYiB,MAAQiB,EAAOC,YAAYE,MAEvCnC,EAAYkB,YAAcc,EAAOC,YAAYE,MAC7CpC,EAAWmB,YAAcc,EAAOC,YAAYC,KAG5CtC,EAAWmB,MAAQiB,EAAOC,YAAYtB,KAEN,KAA5BqB,EAAOC,YAAYtB,KACrBlB,EAAY8B,UAAW,MAClB,CACL9B,EAAY8B,UAAW,GACRlB,EAAc2B,EAAOC,YAAYtB,OAAS,IAElDgB,QAAQpB,IACb,MAAMM,EAASnB,SAASoB,cAAc,UACtCD,EAAOE,MAAQR,EAAMqB,UACrBf,EAAOK,YAAcX,EAAMqB,UAC3BnC,EAAY0B,YAAYN,KAE1BpB,EAAYsB,MAAQiB,EAAOC,YAAY1B,WAW7Cd,EAAY2B,iBAAiB,SAAWgB,IAEpC,MAAMC,EAAoBD,EAAMd,OAAOP,MAKvCd,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,WAAYnB,MAAO8B,MAO1DxC,EAAWuB,iBAAiB,QAAUgB,IAEpC,MAAME,EAAeF,EAAMd,OAAOP,MAGlChB,EAAWmB,YAAcoB,EACzBrC,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,UAAWQ,KAAMI,MAItDzC,EAAWuB,iBAAiB,SAAWgB,IAEnC,MAAME,EAAeF,EAAMd,OAAOP,MAIlCd,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,UAAWQ,KAAMI,MAMxDxC,EAAYsB,iBAAiB,SAAWgB,IAEtC,MAAMG,EAAgBH,EAAMd,OAAOP,MAEnCf,EAAYkB,YAAcqB,EAE1BtC,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,WAAYS,MAAOI","file":"popup.js","sourceRoot":"../src","sourcesContent":["\n// Get the <select> element for voice selection\nconst voiceSelect = document.getElementById('voiceSelect');\nconst langSelect = document.getElementById('langSelect');\n\n// Get the <input> element for rate slider\nconst rateSlider = document.getElementById('rate-slider');\n\n// Retrieve the pitch slider element\nconst pitchSlider = document.getElementById('pitchSlider');\n\n// Get the <output> element for rate output\nconst rateOutput = document.getElementById('rate-output');\nconst pitchOutput = document.getElementById('pitch-output');\n\n\n\n\n\n\n\n\n    // chrome.storage.local.get(['speechStore'], function(result) {\n    //   if (result.speechStore.voice !== null) {\n    //     voiceSelect.value = result.speechStore.voice\n    //   }\n      \n    // })\n\n\n\nchrome.tts.getVoices((voices) => {\n    // Loop through the retrieved voices and create <option> elements\n    const filteredVoices = voices.filter(voice => !voice.hasOwnProperty(\"extensionId\"));\n      // Group the filtered voice objects based on \"lang\" key\n  const groupedVoices = filteredVoices.reduce((acc, voice) => {\n    const lang = voice.lang;\n    if (!acc.hasOwnProperty(lang)) {\n      acc[lang] = [];\n    }\n    acc[lang].push(voice);\n    return acc;\n  }, {});\n\n\n  for (const lang in groupedVoices) {\n    const option = document.createElement('option');\n    option.value = lang;\n    option.style.textTransform = 'uppercase';\n\n\n    option.textContent = lang;\n    langSelect.appendChild(option);\n  }\n\n  // Add event listener to langSelect to populate voiceSelect based on selected language\n  langSelect.addEventListener('change', (e) => {\n    const lang = e.target.value;\n    const voices = groupedVoices[lang] || [];\n    const voiceSelect = document.getElementById('voiceSelect');\n    if (lang == \"\") {\n      voiceSelect.disabled = true\n      chrome.runtime.sendMessage({ type: \"setLang\", lang: null });\n      \n      \n    } else {\n      voiceSelect.disabled = false\n      chrome.runtime.sendMessage({ type: \"setLang\", lang: lang });\n\n    }\n    voices.forEach(voice => {\n      const option = document.createElement('option');\n      option.value = voice.voiceName;\n      option.textContent = voice.voiceName;\n      voiceSelect.appendChild(option);\n    });\n\n    // chrome.storage.local.get(['speechStore'], function(result) {\n    //   if (result.speechStore.voice !== null) {\n    //     voiceSelect.value = result.speechStore.voice\n    //   }\n      \n    // })\n  });\n\n\n  chrome.storage.local.get(['speechStore'], function(result) {\n    rateSlider.value = result.speechStore.rate\n    pitchSlider.value = result.speechStore.pitch\n  \n    pitchOutput.textContent = result.speechStore.pitch\n    rateOutput.textContent = result.speechStore.rate\n  \n  \n    langSelect.value = result.speechStore.lang\n  \n    if (result.speechStore.lang === \"\") {\n      voiceSelect.disabled = true\n    } else {\n      voiceSelect.disabled = false\n      const voices = groupedVoices[result.speechStore.lang] || [];\n      \n      voices.forEach(voice => {\n        const option = document.createElement('option');\n        option.value = voice.voiceName;\n        option.textContent = voice.voiceName;\n        voiceSelect.appendChild(option);\n      });      \n      voiceSelect.value = result.speechStore.voice\n    }\n    \n  })\n\n\n  \n  });\n\n\n// Add an event listener for voice selection changes\nvoiceSelect.addEventListener('change', (event) => {\n    // Retrieve the selected voice's voiceName property\n    const selectedVoiceName = event.target.value;\n\n\n\n    // Send a message to background.js with some data\n    chrome.runtime.sendMessage({ type: \"setVoice\", voice: selectedVoiceName });\n\n\n});\n\n\n// Add an event listener for rate slider changes\nrateSlider.addEventListener('input', (event) => {\n  // Retrieve the selected rate value\n  const selectedRate = event.target.value;\n\n  // Update the rate output element with the selected rate value\n  rateOutput.textContent = selectedRate;\n  chrome.runtime.sendMessage({ type: \"setRate\", rate: selectedRate });\n});\n\n  // Add an event listener for rate slider changes\nrateSlider.addEventListener('change', (event) => {\n    // Retrieve the selected rate value\n    const selectedRate = event.target.value;\n  \n    // Use the selected rate to set the rate of text-to-speech\n    // You can use chrome.tts.speak() with the rate parameter set to the selected rate value\n    chrome.runtime.sendMessage({ type: \"setRate\", rate: selectedRate });\n});\n  \n\n\n// Add an event listener for pitch slider changes\npitchSlider.addEventListener('change', (event) => {\n  // Retrieve the selected pitch value\n  const selectedPitch = event.target.value;\n\n  pitchOutput.textContent = selectedPitch\n\n  chrome.runtime.sendMessage({ type: \"setPitch\", pitch: selectedPitch });\n});\n"]}