{"version":3,"sources":["background.js"],"names":["chrome","runtime","onInstalled","addListener","console","log","tts","stop","saveToStorage","speechStore","lang","voice","rate","pitch","previousId","wordChar","isPaused","isRemaining","remainingText","storage","local","set","tabs","onUpdated","tabId","changeInfo","tab","url","startsWith","action","setIcon","path","setPopup","popup","onMessage","request","sender","sendResponse","type","speak","text","onEvent","event","substring","charIndex","query","active","currentWindow","sendMessage","id","trigger","voiceName","pause","resume","parseFloat"],"mappings":";AAAAA,OAAOC,QAAQC,YAAYC,YAAY,KACnCC,QAAQC,IAAI,sDACZL,OAAOM,IAAIC,OAEXC,MAKF,MAAMC,EAAc,CAClBC,KAAM,GACNC,MAAO,GACPC,KAAM,EACNC,MAAO,GAGT,IAAIC,EAGAC,EAFAC,GAAW,EACXC,GAAc,EAEdC,EAAgB,GAEpB,SAASV,IACPR,OAAOmB,QAAQC,MAAMC,IAAI,CAAEZ,YAAAA,GAAe,WACxCL,QAAQC,IAAI,iBAKhBL,OAAOsB,KAAKC,UAAUpB,YAAY,CAACqB,EAAOC,EAAYC,KAChDA,EAAIC,IAAIC,WAAW,8BACrB5B,OAAO6B,OAAOC,QAAQ,CAAEC,KAAM,eAAgBP,MAAAA,IAG9CxB,OAAO6B,OAAOG,SAAS,CAAEC,MAAO,aAAcT,MAAAA,OAQlDxB,OAAOC,QAAQiC,UAAU/B,YAAY,SAASgC,EAASC,EAAQC,GAExC,SAAjBF,EAAQG,KAGVtC,OAAOM,IAAIiC,MACTJ,EAAQK,KACR,CACEC,QAAS,SAASC,GAShB,GAPkB,SAAdA,EAAMJ,OAERpB,EAAgBiB,EAAQK,KAAKG,UAAUD,EAAME,YAK7B,OAAdF,EAAMJ,KAAe,CAGvB,GADAlC,QAAQC,IAAI,mBACRW,EAEF,YADAC,GAAc,GAKhBjB,OAAOsB,KAAKuB,MAAM,CAAEC,QAAQ,EAAMC,eAAe,GAASzB,IACxDtB,OAAOsB,KAAK0B,YAAY1B,EAAK,GAAG2B,GAAI,CAAEC,QAAS,aAC/CjC,GAAc,EACdD,GAAW,EACXE,EAAgB,KAGF,eAAdwB,EAAMJ,OACRxB,EAAaqB,EAAQc,GACrBjC,GAAW,EACXC,GAAc,EAEdjB,OAAOsB,KAAKuB,MAAM,CAAEC,QAAQ,EAAMC,eAAe,GAASzB,IACxDtB,OAAOsB,KAAK0B,YAAY1B,EAAK,GAAG2B,GAAI,CAAEC,QAAS,cAAepC,WAAAA,QAKpEJ,KAAMD,EAAYC,KAClByC,UAAW1C,EAAYE,MACvBC,KAAMH,EAAYG,KAClBC,MAAOJ,EAAYI,QAME,UAAjBsB,EAAQG,MAEhBtC,OAAOM,IAAI8C,QACXpC,GAAW,GAGc,WAAjBmB,EAAQG,MAEhBtC,OAAOM,IAAI+C,SACXrC,GAAW,EAEPC,IACFjB,OAAOM,IAAIiC,MAAMrB,EAAe,CAAEiC,UAAW1C,EAAYE,QACzDM,GAAc,IAGS,SAAjBkB,EAAQG,MAChBtC,OAAOM,IAAIC,OACXU,GAAc,EACdD,GAAW,EACXE,EAAgB,IAES,aAAjBiB,EAAQG,MAChB7B,EAAYE,MAAQwB,EAAQxB,MAE5BH,KAEyB,YAAjB2B,EAAQG,MAChB7B,EAAYG,KAAO0C,WAAWnB,EAAQvB,MAEtCJ,KACyB,aAAjB2B,EAAQG,MAChB7B,EAAYI,MAAQyC,WAAWnB,EAAQtB,OAEvCL,KACyB,YAAjB2B,EAAQG,OAChB7B,EAAYC,KAAOyB,EAAQzB,KAE3BF","file":"background.js","sourceRoot":"../src","sourcesContent":["chrome.runtime.onInstalled.addListener(() => {\n    console.log('[background] chrome.runtime.onInstalled initialize');\n    chrome.tts.stop()\n\n    saveToStorage()\n\n    \n  });\n\n  const speechStore = {\n    lang: \"\",\n    voice: \"\",\n    rate: 1,\n    pitch: 1\n  };\n  \n  let previousId;\n  let isPaused = false\n  let isRemaining = false\n  let wordChar;\n  let remainingText = ''\n\n  function saveToStorage() {\n    chrome.storage.local.set({ speechStore }, function() {\n      console.log(\"Data stored\");\n    });\n  }\n\n\n  chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (tab.url.startsWith(\"https://chat.openai.com/\")) {\n      chrome.action.setIcon({ path: \"icon-128.png\", tabId });\n\n\n      chrome.action.setPopup({ popup: \"popup.html\", tabId })\n      \n      \n    }\n\n  });\n  \n\n  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n\n    if (request.type === 'play') {\n\n      \n      chrome.tts.speak(\n        request.text,\n        {\n          onEvent: function(event) {\n\n            if (event.type == 'pause') {\n\n              remainingText = request.text.substring(event.charIndex);\n            }\n\n\n\n            if (event.type == 'end') {\n\n              console.log(\"THis just ended\");\n              if (isPaused) {\n                isRemaining = true\n                return;\n              }\n\n\n              chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n                chrome.tabs.sendMessage(tabs[0].id, { trigger: \"finished\" });\n                isRemaining = false\n                isPaused = false\n                remainingText = ''\n              });              \n            }\n            if (event.type == 'interrupted') {\n              previousId = request.id\n              isPaused = false\n              isRemaining = false\n\n              chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n                chrome.tabs.sendMessage(tabs[0].id, { trigger: \"interrupted\", previousId });\n              });              \n                \n            }\n          },\n          lang: speechStore.lang,\n          voiceName: speechStore.voice,\n          rate: speechStore.rate,\n          pitch: speechStore.pitch\n        },\n      );\n\n\n\n    } else if(request.type === 'pause') {\n\n      chrome.tts.pause();\n      isPaused = true\n\n\n    } else if(request.type === 'resume') {\n\n      chrome.tts.resume();\n      isPaused = false\n\n      if (isRemaining) {\n        chrome.tts.speak(remainingText, { voiceName: speechStore.voice })\n        isRemaining = false\n      }\n\n    } else if(request.type === 'stop') {\n      chrome.tts.stop()\n      isRemaining = false\n      isPaused = false\n      remainingText = ''\n\n    } else if(request.type === 'setVoice') {\n      speechStore.voice = request.voice\n\n      saveToStorage()\n\n    } else if(request.type === 'setRate') {\n      speechStore.rate = parseFloat(request.rate)\n\n      saveToStorage()\n    } else if(request.type === 'setPitch') {\n      speechStore.pitch = parseFloat(request.pitch)\n\n      saveToStorage()\n    } else if(request.type === 'setLang') {\n      speechStore.lang = request.lang\n\n      saveToStorage()\n    }\n\n  })\n  "]}